//
//  main.c
//  test4
//  多线程的同步和互斥
//  Created by 史 哲文 on 13-3-20.
//  Copyright (c) 2013年 史 哲文. All rights reserved.
//

#include <pthread.h>
#include <semaphore.h>
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>

int number;
sem_t *sem_id;
char sem_name[]="test4";

void* thread_one_fun(void *arg)
{
    sem_wait(sem_id);
    printf("线程1拿到资源\n");
    number++;
    printf("number=%d\n",number);
    sem_post(sem_id);
}

void* thread_two_fun(void *arg)
{
    sem_wait(sem_id);
    printf("线程2拿到资源\n");
    number--;
    printf("number=%d\n",number);
    sem_post(sem_id);
}

int main(int argc, char * argv[])
{

    number=1;
    pthread_t id1, id2;
    sem_id = sem_open(sem_name, O_CREAT,0644,1);pthread_create(&id1, NULL, thread_one_fun, NULL);
    pthread_create(&id2, NULL, thread_two_fun, NULL);
    pthread_join(id1, NULL);
    pthread_join(id2, NULL);
    sem_close(sem_id);
    sem_unlink(sem_name);
    printf("main函数结束\n");
    return 0;
}

