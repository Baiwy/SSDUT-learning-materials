//
//  main.c
//  test3
//   利用POSIX信号量模拟苹果橘子问题
//  Created by 史 哲文 on 13-3-19.
//  Copyright (c) 2013年 史 哲文. All rights reserved.
//
#include<semaphore.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<sys/mman.h>
#include<unistd.h>
#include<sys/ipc.h>
#include<sys/sem.h>
#include<stdlib.h>
#include<math.h>
#include<errno.h>

char sem_name1[]="test1";
char sem_name2[]="test2";
char sem_name3[]="test3";

int main()
{
    int pid1,pid2;
    
    sem_t *sg, *sp1, *sp2;
    
    /*创建信号量并赋予初值
    if(sem_init(&sg, 1, 1)<0)
    {
        printf("信号量sg创建失败\n");
        exit(0);
    }
    if(sem_init(&sp1, 2, 0)<0)
    {
        printf("信号量sp1创建失败\n");
        exit(0);
    }
    if(sem_init(&sp2, 3, 0)<0)
    {
        printf("信号量sp2创建失败\n");
        exit(0);
    }
    */
    sem_unlink(sem_name1);
    sem_unlink(sem_name2);
    sem_unlink(sem_name3);
    sg=sem_open(sem_name1, O_CREAT,0644,1);   //0644权限位,读4,写2,执行1
    sp1=sem_open(sem_name2, O_CREAT,0644,0);
    sp2=sem_open(sem_name3, O_CREAT,0644,0);
    
    if(sg==SEM_FAILED)
    {
        printf("信号量sg创建失败\n");
        exit(0);
    }
    if(sp1==SEM_FAILED)
    {
        printf("信号量sp1创建失败\n");
        exit(0);
    }
    if(sp2==SEM_FAILED)
    {
        printf("信号量sp2创建失败\n");
        exit(0);
    }
    

    if(((pid1=fork())<0)||((pid2=fork())<0))
    {
        printf("fork函数创建子进程出现错误。\n");
        exit(3);
    }
    else if(pid1>0 && pid2>0)//父进程，先索取共享资源，而后释放
    {
        
        while(1){
            int i;
            printf("父亲进程ID为：%d，该进程将要削苹果\n",getpid());
            for(i=5;i>0;i--)
            {
                printf("父亲进程（父进程）还要%d秒钟削完苹果……\n",i);
                sleep(1);
            }
            printf("父亲进程将要索取盘子放苹果\n");
            
            if(sem_wait(sg)<0)//以上三行向semid代表的信号灯集的第一个信号灯申请一个资源
            {
                printf("父亲进程中，semop函数索取盘子资源出现错误。\n");
                exit(4);
            }
            else
            {
                printf("父亲进程中，索取盘子资源成功\n");
                sleep(1);
                printf("父亲进程已经把苹果放入盘子，并将叫女儿拿苹果。\n");
                if(sem_post(sp1)<0)//以上三行将释放一个资源给semid代表的信号灯集第一个信号灯
                {
                    printf("父进程中，semop函数告诉女儿苹果已经放入失败。\n");
                    exit(5);
                }
                else
                {
                    printf("父进程中，成功告诉女儿苹果已经放了。\n");
                    sleep(1);
                }
            }
            
        }
    }
    else if (pid1>0 && pid2==0)//母亲进程
    {
        while(1){
            int i;
            printf("母亲进程ID为：%d，该进程将要剥桔子\n",getpid());
            for(i=6;i>0;i--)
            {
                printf("母亲进程（父进程）还要%d秒钟剥完橘子……\n",i);
                sleep(1);
            }
            printf("母亲进程将要索取盘子放橘子\n");
            
            if(sem_wait(sg)<0)//以上三行向semid代表的信号灯集的第一个信号灯申请一个资源
            {
                printf("母亲进程中，semop函数索取盘子资源出现错误。\n");
                exit(4);
            }
            else
            {
                printf("母亲进程中，索取盘子资源成功\n");
                sleep(1);
                printf("母亲进程已经把橘子放入盘子，并将叫儿子拿橘子。\n");
                if(sem_post(sp2)<0)//以上三行将释放一个资源给semid代表的信号灯集第一个信号灯
                {
                    printf("母亲进程中，semop函数告诉儿子橘子已经放入失败。\n");
                    exit(5);
                }
                else
                {
                    printf("母亲进程中，成功告诉儿子橘子已经放了。\n");
                    sleep(2);
                }
            }
            
        }
        
    }
    else if (pid1==0 && pid2>0)   //儿子进程
    {
        
        while(1){
            int i;
            printf("儿子进程ID为：%d，该进程将要拿桔子吃\n",getpid());
            if(sem_wait(sp2)<0)//以上三行向semid代表的信号灯集的第一个信号灯申请一个资源
            {
                printf("儿子进程中，semop函数看看盘子中是否有橘子出现错误。\n");
                exit(4);
            }
            else
            {
                printf("儿子进程中，发现盘子中有橘子，索取盘子资源成功\n");
                sleep(1);
                if(sem_post(sg)<0)//以上三行将释放一个资源给semid代表的信号灯集第一个信号灯
                {
                    printf("儿子进程中，semop函数告诉父母盘子已经空了失败。\n");
                    exit(5);
                }
                else
                {
                    printf("儿子进程已经把拿起橘子。\n");
                    for(i=10;i>0;i--)
                    {
                        printf("儿子进程还要%d秒钟吃完橘子……\n",i);
                        sleep(1);
                    }
                    
                }
            }
            
        }
        
    }
    else
    {
        
        while(1){
            int i;
            printf("女儿进程ID为：%d，该进程将要拿苹果吃\n",getpid());
            
            if(sem_wait(sp1)<0)//以上三行向semid代表的信号灯集的第一个信号灯申请一个资源
            {
                printf("女儿进程中，semop函数看看盘子中是否有苹果出现错误。\n");
                exit(4);
            }
            else
            {
                printf("女儿进程中，发现盘子中有苹果，索取盘子资源成功\n");
                sleep(1);
                if(sem_post(sg)<0)//以上三行将释放一个资源给semid代表的信号灯集第一个信号灯
                {
                    printf("女儿进程中，semop函数告诉父母盘子已经空了失败。\n");
                    exit(5);
                }
                else
                {
                    printf("女儿进程已经把苹果拿起。\n");
                    for(i=9;i>0;i--)
                    {
                        printf("女儿进程还要%d秒钟吃完苹果……\n",i);
                        sleep(1);
                    }
                    
                }
            }
            
        }
        
    }
}